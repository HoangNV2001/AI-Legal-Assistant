# configs/legal_multi_agent_no_web.yml
general:
  use_uvloop: true

embedders:
  llama-3.2-nv-embedqa-1b-v2:
    _type: nim
    base_url: "http://localhost:8016/v1"
    model_name: "nvidia/llama-3.2-nv-embedqa-1b-v2"  # NIM-native; NAT will set input_type for queries

retrievers:
  reg_retriever:
    _type: milvus_retriever
    uri: http://localhost:19530
    collection_name: "vn_regulations"
    embedding_model: llama-3.2-nv-embedqa-1b-v2
    top_k: 5

    vector_field_name: vector
    text_field_name: text
    metadata_fields: [issued_date]
    search_params:
      metric_type: COSINE
      params: { "nprobe": 32 }

functions:
  # --- RAG from Milvus ---
  reg_tool:
    _type: nat_retriever
    retriever: reg_retriever
    topic: Retrieve Vietnamese regulatory documents (decrees, circulars)

  current_time:
    _type: current_datetime
    description: "Return current date-time; DO NOT call this unless explicitly asked."

  # --- Quality-check: sub-agent (react_agent) ---
  answer_quality_check:
    _type: react_agent
    llm_name: vllm_llm
    verbose: false
    tool_names: [current_time]
    additional_instructions: |
      Role: Strict JSON scorer for legal answers (Milvus-only).
      Input format: a one-line JSON string with fields: query, draft, and signals with milvus_hits.
      Task: evaluate groundedness, completeness, and recency; choose one action among accept, need_more_rag.
      Output: return ONLY one-line JSON with keys groundedness, completeness, recency_ok, action, notes.
      Do NOT print Thought/Action/Final Answer. Do NOT call any tool. No prose.

  # --- Aggregate/Merge context: sub-agent (react_agent) ---
  aggregate_context_llm:
    _type: react_agent
    llm_name: vllm_llm
    verbose: false
    tool_names: [current_time]
    additional_instructions: |
      Role: Context merger for Milvus-only RAG.
      Input: one-line JSON with fields query, milvus_snippets (list of {{text}}), max_tokens (int).
      Task: deduplicate; prefer passages with concrete thresholds, article numbers, effective dates.
      Output: return ONLY one-line JSON with key merged (list of {{text}}).
      Do NOT print Thought/Action/Final Answer. Do NOT call any tool. No prose.

llms:
  vllm_llm:
    _type: openai
    api_key: "EMPTY"
    base_url: "http://localhost:8015/v1"
    model_name: nvidia/NVIDIA-Nemotron-Nano-9B-v2
    max_tokens: 512
    temperature: 0

workflow:
  _type: react_agent
  llm_name: vllm_llm
  verbose: true
  parse_agent_response_max_retries: 5
  tool_names:
    - reg_tool
    - answer_quality_check
    - aggregate_context_llm
  additional_instructions: |
    /no_think
    STRICT FORMAT (no text before the first line).

    When YOU NEED TO CALL A TOOL, return EXACTLY 3 lines:
    Thought: LOOKUP
    Action: <reg_tool | answer_quality_check | aggregate_context_llm>
    Action Input: <valid ONE-LINE JSON, NO code fences, NO newlines>

    When YOU PRODUCE THE FINAL ANSWER, return EXACTLY 1 line:
    Final Answer: <respond in Vietnamese, concise and structured; end with 'Đây không phải tư vấn pháp lý.'>

    RULES:
    - Use only tools listed in tool_names.
    - If evidence is insufficient: use Thought: LOOKUP → Action: reg_tool.
    - Do NOT print anything beyond the specified lines (no explanations, no markdown, no code fences).
    - Every JSON in Action Input MUST be ONE LINE.

    VALID EXAMPLE (call retriever):
    Thought: LOOKUP
    Action: reg_tool
    Action Input: {{"query":"mức phạt vượt đèn đỏ"}}

    VALID EXAMPLE (finalize):
    Final Answer: … Đây không phải tư vấn pháp lý.

eval:
  general:
    output_dir: sizing_output/eval
    dataset:
      _type: json
      file_path: ./data/eval/Legal_agent.json
